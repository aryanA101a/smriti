// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/auth_status_model.dart';
import 'models/smriti_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 5272811649752304343),
      name: 'Smriti',
      lastPropertyId: const obx_int.IdUid(7, 7158364480002104988),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 7709389618334848102),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 6935855021610003663),
            name: 'date',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 790553564301724694),
            name: 'lastUpdated',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5944835490569314553),
            name: 'tag',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3907542699117804646),
            name: 'title',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 5898045686429042219),
            name: 'body',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 7158364480002104988),
            name: 'synced',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 4649168301953587620),
      name: 'AuthStatus',
      lastPropertyId: const obx_int.IdUid(3, 9188790563659644175),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 2951858587421105573),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2819126526412106859),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 9188790563659644175),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(3, 4649168301953587620),
      lastIndexId: const obx_int.IdUid(0, 0),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [3756020982339505630],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        712455285371013782,
        174418981719344744,
        7534877745571956291
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Smriti: obx_int.EntityDefinition<Smriti>(
        model: _entities[0],
        toOneRelations: (Smriti object) => [],
        toManyRelations: (Smriti object) => {},
        getId: (Smriti object) => object.id,
        setId: (Smriti object, int id) {
          object.id = id;
        },
        objectToFB: (Smriti object, fb.Builder fbb) {
          final tagOffset = fbb.writeString(object.tag);
          final titleOffset = fbb.writeString(object.title);
          final bodyOffset = fbb.writeString(object.body);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.date.millisecondsSinceEpoch);
          fbb.addInt64(2, object.lastUpdated.millisecondsSinceEpoch);
          fbb.addOffset(3, tagOffset);
          fbb.addOffset(4, titleOffset);
          fbb.addOffset(5, bodyOffset);
          fbb.addBool(6, object.synced);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final dateParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0));
          final lastUpdatedParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0));
          final tagParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final titleParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final bodyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final syncedParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final object = Smriti(
              id: idParam,
              date: dateParam,
              lastUpdated: lastUpdatedParam,
              tag: tagParam,
              title: titleParam,
              body: bodyParam,
              synced: syncedParam);

          return object;
        }),
    AuthStatus: obx_int.EntityDefinition<AuthStatus>(
        model: _entities[1],
        toOneRelations: (AuthStatus object) => [],
        toManyRelations: (AuthStatus object) => {},
        getId: (AuthStatus object) => object.id,
        setId: (AuthStatus object, int id) {
          object.id = id;
        },
        objectToFB: (AuthStatus object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, emailOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final emailParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = AuthStatus(name: nameParam, email: emailParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Smriti] entity fields to define ObjectBox queries.
class Smriti_ {
  /// See [Smriti.id].
  static final id =
      obx.QueryIntegerProperty<Smriti>(_entities[0].properties[0]);

  /// See [Smriti.date].
  static final date = obx.QueryDateProperty<Smriti>(_entities[0].properties[1]);

  /// See [Smriti.lastUpdated].
  static final lastUpdated =
      obx.QueryDateProperty<Smriti>(_entities[0].properties[2]);

  /// See [Smriti.tag].
  static final tag =
      obx.QueryStringProperty<Smriti>(_entities[0].properties[3]);

  /// See [Smriti.title].
  static final title =
      obx.QueryStringProperty<Smriti>(_entities[0].properties[4]);

  /// See [Smriti.body].
  static final body =
      obx.QueryStringProperty<Smriti>(_entities[0].properties[5]);

  /// See [Smriti.synced].
  static final synced =
      obx.QueryBooleanProperty<Smriti>(_entities[0].properties[6]);
}

/// [AuthStatus] entity fields to define ObjectBox queries.
class AuthStatus_ {
  /// See [AuthStatus.id].
  static final id =
      obx.QueryIntegerProperty<AuthStatus>(_entities[1].properties[0]);

  /// See [AuthStatus.name].
  static final name =
      obx.QueryStringProperty<AuthStatus>(_entities[1].properties[1]);

  /// See [AuthStatus.email].
  static final email =
      obx.QueryStringProperty<AuthStatus>(_entities[1].properties[2]);
}
